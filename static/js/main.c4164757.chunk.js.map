{"version":3,"sources":["logo.svg","reducers/postReducer.js","reducers/index.js","actions/types.js","store.js","components/Posts.jsx","actions/postActions.js","components/PostForm.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","items","item","combineReducers","posts","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","Posts","this","props","fetchPosts","nextProps","newPost","unshift","postItems","map","post","key","id","title","body","Component","connect","dispatch","fetch","then","res","json","PostForm","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPost","postData","method","headers","JSON","stringify","App","className","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4164757.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { FETCH_POSTS, NEW_POST } from '../actions/types';\n\nconst initialState = {\n    items: [],\n    item: {}\n}\n\nexport default function(state = initialState, action) {\n\n    switch(action.type) {\n        \n        case FETCH_POSTS:\n            return {\n                ...state,\n                items: action.payload\n            };\n        \n        case NEW_POST:\n            return {\n                ...state,\n                item: action.payload\n            }\n\n        default:\n            return state;\n\n    }\n}","import { combineReducers } from 'redux';\nimport postReducer from './postReducer';\n\nexport default combineReducers({\n    posts: postReducer\n});","export const FETCH_POSTS = 'FETCH_POSTS';\n\nexport const NEW_POST = 'NEW_POST';","import {\n    createStore,\n    applyMiddleware,\n    compose\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer, \n    initialState, \n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ &&\n        window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { fetchPosts } from \"../actions/postActions\";\n\n\nclass Posts extends Component {\n  componentDidMount() {\n    this.props.fetchPosts();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.newPost) {\n        this.props.posts.unshift(nextProps.newPost);\n    }\n  }\n\n  render() {\n    const postItems = this.props.posts.map((post) => (\n      <div key={post.id}>\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    ));\n\n    return (\n      <div>\n        <h1>Posts</h1>\n        <div>{postItems}</div>\n      </div>\n    );\n  }\n}\n\nPosts.propTypes = {\n    fetchPosts: PropTypes.func.isRequired,\n    posts: PropTypes.array.isRequired,\n    newPost: PropTypes.object\n}\n\nconst mapStateToProps = state => ({\n    posts: state.posts.items,\n    newPost: state.posts.item\n})\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\n","import {\n    FETCH_POSTS,\n    NEW_POST\n} from './types';\n\nexport const fetchPosts = () => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(res => res.json())\n        .then(posts => dispatch({\n            type: FETCH_POSTS,\n            payload: posts\n        }));\n};\n\nexport const createPost = (postData) => dispatch => {\n    fetch('https://jsonplaceholder.typicode.com/posts', {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(postData)\n        })\n        .then(res => res.json())\n        .then(post => dispatch({\n            type: NEW_POST,\n            payload: post\n        }));\n};","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createPost } from '../actions/postActions';\n\nclass PostForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            body: ''\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    onSubmit (e) {        \n        e.preventDefault();\n\n        const post = {\n            title: this.state.title,\n            body: this.state.body\n        };\n\n        this.props.createPost(post);\n    }\n\n\n    render() {\n \n        return (\n            <div>\n                <h1>Add Post</h1>\n                <form onSubmit={this.onSubmit}>\n                    <div>\n                        <label>Title: </label><br/>\n                        <input type=\"text\" name=\"title\" onChange={this.onChange}\n                        value={this.state.title}/>\n                    </div>\n                    <br/>\n                    <div>\n                        <label>Body: </label><br/>\n                        <textarea name=\"body\" type=\"text\" onChange={this.onChange} \n                        value={this.state.body}/>\n                    </div>\n                    <br/>\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nPostForm.propTypes = {\n    createPost: PropTypes.func.isRequired\n}\n\nexport default connect(null, { createPost })(PostForm);\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport Posts from './components/Posts';\nimport PostForm from './components/PostForm';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <PostForm />\n        <hr />\n        <Posts />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}